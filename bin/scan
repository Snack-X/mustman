#!/usr/bin/env node

const path = require("path");
const utils = require("../src/utils");
const { Probe, readdirRecursive, sqliteOpen, sha256 } = utils;

async function checkDuplicatedEntry(db, entry) {
  const existingEntries = await db.all("SELECT * FROM entries");

  for(const dir of existingEntries) {
    if(dir.path === entry) {
      console.error(`[ERROR] '${entry}' is already added to the database`);
      console.error(`[ERROR] If you want to rescan this directory, run 'bin/scan "${entry}" -f'`);
      return false;
    }

    else if(entry.startsWith(dir.path)) {
      console.error(`[ERROR] '${entry}' is already added to the database by the parent directory ${dir.path}`);
      console.error(`[ERROR] If you want to rescan this particular directory, run 'bin/scan "${entry}" -f'`);
      return false;
    }

    else if(dir.path.startsWith(entry)) {
      console.error(`[ERROR] '${dir.path}' is already added to the database, which is a subdirectory of '${entry}'`);
      console.error(`[ERROR] If you want to replace this subdirectory with the parent directory, run 'bin/scan "${entry}" -f'`);
      return false;

      // await db.run("DELETE FROM entries WHERE path = ?", dir.path);
    }
  }

  await db.run("INSERT INTO entries (path) VALUES ( ? )", entry);
  return true;
}

(async function() {

  const basePath = path.resolve(process.argv[2]);
  const db = await sqliteOpen(path.join(__dirname, "../music.db"));

  let checkResult = await checkDuplicatedEntry(db, basePath);
  if(!checkResult) return;

  console.log("Scanning files under " + basePath);
  console.log("This may take a while, hold on...");

  let entries = await readdirRecursive(basePath, /\.(mp3|flac)$/);
  console.log(`Found ${entries.length} files`);
  console.log("Reading ID3 tags");
  console.log("This may take a while, hold on...");

  let insertCount = 0;

  for(let entry of entries) {
    const probe = await Probe(entry);

    if(!probe.streams) {
      console.log(`[INFO] Skipping ${entry} (No stream found)`);
      continue;
    }
    if(probe.streams[0].codec_type !== "audio") {
      console.log(`[INFO] Skipping ${entry} (Stream #0 is not a audio stream)`);
      continue;
    }

    let id = sha256(entry);
    let title = path.basename(entry), album = "", artist = "", albumArtist = "";
    if(probe.format.tags) {
      if(probe.format.tags.title) title = probe.format.tags.title;
      if(probe.format.tags.album) album = probe.format.tags.album;
      if(probe.format.tags.artist) artist = probe.format.tags.artist;
      if(probe.format.tags.album_artist) albumArtist = probe.format.tags.album_artist;
    }

    let query = "INSERT OR REPLACE INTO files";
    query += " (id, filepath, title, album, artist, album_artist)";
    query += " VALUES (?, ?, ?, ?, ?, ?)";
    await db.run(query, id, entry, title, album, artist, albumArtist);

    insertCount += 1;
  }

  const skippedCount = entries.length - insertCount;
  console.log(`Finished scanning ${insertCount} files`);
  if(skippedCount > 0) console.log(`${skippedCount} files were skipped`);

})()
.then(() => { })
.catch(e => { console.error(e); });
