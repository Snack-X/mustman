#!/usr/bin/env node

const path = require("path");
const utils = require("../src/utils");
const { Probe, readdirRecursive, sha256 } = utils;
const DB = require("../src/dbUtils");

//======================================
// Parsing arguments

const usage = `
Usage: bin/manage list             List added entries
       bin/manage add <path>       Add and scan entry
       bin/manage update <path>    Rescan entry
       bin/manage remove <path>    Remove entry
       bin/manage help             Print this help message
`.trim();

const argv = process.argv.slice(2);
let command = argv[0], parameters = [], options = {}, lastOption;

for(let i = 1 ; i < argv.length ; i++) {
  if(argv[i].startsWith("-")) {
    let optionKey = argv[i].substr(1);
    options[optionKey] = true;
    lastOption = optionKey;
  }
  else if(lastOption) {
    options[lastOption] = argv[i];
    lastOption = null;
  }
  else {
    parameters.push(argv[i]);
  }
}

//======================================
// Entrypoint

(async function() {
  if(typeof command === "undefined") printUsage();

  switch(command) {
    case "list": await listEntries(); break;
    case "add": await addEntry(); break;
    case "update": break;
    case "remove": break;
    case "help": printUsage(); break;
    default: printUsage(command); break;
  }
})().then(() => {}).catch(e => { console.error(e.stack); });

//======================================
// List

async function listEntries() {
  const db = await DB.load();
  const col = DB.getCollection(db, "entries");
  const entries = col.find({});

  console.log("List of added entries:");
  console.log(entries.map(e => "  " + e.path).join("\n"));
}

//======================================
// Add

async function addEntry() {
  const entry = path.resolve(parameters[0]);
  if(!entry) printUsage();

  const db = await DB.load();
  const colEntries = DB.getCollection(db, "entries");

  // Check existing entries
  const existingEntries = colEntries.find({});

  for(const dir of existingEntries) {
    if(dir.path === entry) {
      console.error(`[ERROR] '${entry}' is already added to the database`);
      console.error(`[ERROR] To update this entry, run 'bin/manage update "${entry}"'`);
      return false;
    }
    else if(entry.startsWith(dir.path)) {
      console.error(`[ERROR] '${entry}' is already added to the database by the parent entry ${dir.path}`);
      console.error(`[ERROR] To update this particular entry, run 'bin/manage update "${entry}"'`);
      return false;
    }

    else if(dir.path.startsWith(entry)) {
      if(options.f === false) {
        console.error(`[ERROR] '${entry}' is a parent entry of existing entry '${dir.path}'`);
        console.error(`[ERROR] To replace this entry with the parent entry, run 'bin/add "${entry}" -f'`);
        return false;
      }
      else {
        console.error(`[INFO] '${entry}' is a parent entry of existing entry '${dir.path}'`);
        console.error(`[INFO] This entry will be replaced with the parent entry`);

        await db.run("DELETE FROM entries WHREE path = ?", entry);
      }
    }
  }

  // Scan files
  console.log("Scanning files under " + entry);
  console.log("This may take a while, hold on...");

  const entries = await readdirRecursive(entry, /\.(mp3|flac)$/);
  console.log(`Found ${entries.length} files`);

  // Read and save ID3 tags
  const colFiles = DB.getCollection(db, "entries");
  console.log("Reading ID3 tags");
  console.log("This may take a while, hold on...");

  let insertCount = 0;

  for(let childEntry of entries) {
    const probe = await Probe(childEntry);

    if(!probe.streams) {
      console.log(`[INFO] Skipping ${childEntry} (No stream found)`);
      continue;
    }
    if(probe.streams[0].codec_type !== "audio") {
      console.log(`[INFO] Skipping ${childEntry} (Stream #0 is not a audio stream)`);
      continue;
    }

    let id = sha256(childEntry);
    let title = "", album = "", artist = "", albumArtist = "";
    if(probe.format.tags) {
      if(probe.format.tags.title) title = probe.format.tags.title.trim();
      if(probe.format.tags.album) album = probe.format.tags.album.trim();
      if(probe.format.tags.artist) artist = probe.format.tags.artist.trim();
      if(probe.format.tags.album_artist) albumArtist = probe.format.tags.album_artist.trim();
    }

    if(title === "") title = path.basename(childEntry);

    colFiles.insert({ id: id, path: childEntry, title, album, artist, albumArtist });

    insertCount += 1;
  }

  const skippedCount = entries.length - insertCount;
  console.log(`Finished reading ${insertCount} files`);
  if(skippedCount > 0) console.log(`${skippedCount} files were skipped`);

  // Add entry
  colEntries.insert({ path: entry });

  await db.save();
}

//======================================
// Usage

function printUsage(unknownCommand = false) {
  if(unknownCommand) console.error(`Unknown command '${unknownCommand}'`);
  console.error(usage);
  process.exit();
}
